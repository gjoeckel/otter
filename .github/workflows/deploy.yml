# Deployment workflow: reads deploy-config.json and deploys to $SERVER_BASE_PATH/$TARGET_FOLDER
# - Trigger: working-days-fix branch or manual (workflow_dispatch)
# - Purpose: Flexible target folder (e.g., otter2) without editing YAML each time
name: Deploy Enterprise to Web Server

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
    paths:
      - '**/*.php'
      - '**/*.css'
      - '**/*.js'
      - 'config/**'
      - 'deploy-config.json'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify SRD architecture (no build step required)
        run: |
          echo "SRD Architecture: Using individual ES6 modules loaded directly by browser"
          echo "No bundling required - modules are loaded individually"
          echo "Verifying key JavaScript modules exist..."
          ls -la reports/js/*.js | head -10

      - name: Prepare artifacts (filter dev-only paths)
        run: |
          if ! command -v rsync &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y rsync
          fi
          mkdir -p artifacts
          rsync -a \
            --delete \
            --exclude='.git/' \
            --exclude='node_modules/' \
            --exclude='tests/' \
            --exclude='cache/' \
            --exclude='artifacts/' \
            --exclude='reports/dist/' \
            --exclude='dist/' \
            --exclude='**/*.log' \
            ./ ./artifacts/

      - name: Read deployment configuration
        id: config
        run: |
          # Check if jq is available, if not install it
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Read deploy-config.json to get deployment settings
          if [ ! -f "deploy-config.json" ]; then
            echo "Error: deploy-config.json not found"
            exit 1
          fi

          echo "Deployment config file content:"
          cat deploy-config.json

          # Read deployment settings from config file
          TARGET_FOLDER=$(jq -r '.target_folder' deploy-config.json)
          SERVER_BASE_PATH=$(jq -r '.server_base_path' deploy-config.json)

          # Validate that we got actual values, not null
          if [ "$TARGET_FOLDER" = "null" ] || [ -z "$TARGET_FOLDER" ]; then
            echo "Error: Could not read target_folder from deploy-config.json"
            exit 1
          fi

          if [ "$SERVER_BASE_PATH" = "null" ] || [ -z "$SERVER_BASE_PATH" ]; then
            echo "Error: Could not read server_base_path from deploy-config.json"
            exit 1
          fi

          echo "target_folder=$TARGET_FOLDER" >> $GITHUB_OUTPUT
          echo "server_base_path=$SERVER_BASE_PATH" >> $GITHUB_OUTPUT

          # Expose config via outputs for subsequent steps
          echo "Deployment Configuration:"
          echo "Target Folder: $TARGET_FOLDER"
          echo "Server Base Path: $SERVER_BASE_PATH"
          echo "Full Deployment Path: $SERVER_BASE_PATH/$TARGET_FOLDER"



      - name: Ensure target directories exist (pre-deploy)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          key: ${{ secrets.SFTP_PRIVATE_KEY }}
          port: ${{ secrets.SFTP_PORT }}
          script: |
            DEPLOY_PATH="${{ steps.config.outputs.server_base_path }}/${{ steps.config.outputs.target_folder }}"
            echo "Ensuring base directories exist at $DEPLOY_PATH..."
            mkdir -p "$DEPLOY_PATH"
            mkdir -p "$DEPLOY_PATH/reports/js"
            echo "Ready for SRD deployment (individual ES6 modules)."

      - name: Deploy to SFTP (key-based auth)
        uses: wlixcc/SFTP-Deploy-Action@v1.2
        with:
          server: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          ssh_private_key: ${{ secrets.SFTP_PRIVATE_KEY }}
          port: ${{ secrets.SFTP_PORT }}
          local_path: './artifacts/*'
          remote_path: '${{ steps.config.outputs.server_base_path }}/${{ steps.config.outputs.target_folder }}'
          args: '-o StrictHostKeyChecking=no'

      - name: Normalize deployment layout (flatten artifacts if present)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          key: ${{ secrets.SFTP_PRIVATE_KEY }}
          port: ${{ secrets.SFTP_PORT }}
          script: |
            set -e
            DEPLOY_PATH="${{ steps.config.outputs.server_base_path }}/${{ steps.config.outputs.target_folder }}"
            if [ -d "$DEPLOY_PATH/artifacts" ]; then
              echo "Flattening artifacts to $DEPLOY_PATH..."
              rsync -a "$DEPLOY_PATH/artifacts/" "$DEPLOY_PATH/"
              rm -rf "$DEPLOY_PATH/artifacts"
            fi
            echo "Listing deploy root:"
            ls -la "$DEPLOY_PATH" | sed -n '1,200p'

      - name: Set permissions and create directories
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          key: ${{ secrets.SFTP_PRIVATE_KEY }}
          port: ${{ secrets.SFTP_PORT }}
          script: |
            set -e
            DEPLOY_PATH="${{ steps.config.outputs.server_base_path }}/${{ steps.config.outputs.target_folder }}"
            echo "Setting permissions at $DEPLOY_PATH (no chown)..."

            # Base permissions (non-fatal on restricted hosts)
            find "$DEPLOY_PATH" -type f -exec chmod 644 {} \; || true
            find "$DEPLOY_PATH" -type d -exec chmod 755 {} \; || true

            # Executable permissions for PHP files (some hosts use ExecCGI)
            find "$DEPLOY_PATH" -name "*.php" -exec chmod 755 {} \; || true

            # Writable application directories
            mkdir -p "$DEPLOY_PATH/cache" "$DEPLOY_PATH/logs" "$DEPLOY_PATH/test-results"
            chmod -R 777 "$DEPLOY_PATH/cache" "$DEPLOY_PATH/logs" "$DEPLOY_PATH/test-results" || true

            # Enterprise cache subdirectories
            mkdir -p "$DEPLOY_PATH/cache/ccc" "$DEPLOY_PATH/cache/csu" "$DEPLOY_PATH/cache/demo"
            chmod -R 777 "$DEPLOY_PATH/cache/ccc" "$DEPLOY_PATH/cache/csu" "$DEPLOY_PATH/cache/demo" || true

            # Config adjustments
            if [ -d "$DEPLOY_PATH/config" ]; then
              chmod -R 775 "$DEPLOY_PATH/config" || true
              if [ -f "$DEPLOY_PATH/config/passwords.json" ]; then
                chmod 664 "$DEPLOY_PATH/config/passwords.json" || true
              fi
            fi

            # Reports cache, if present
            if [ -d "$DEPLOY_PATH/reports/cache" ]; then
              chmod -R 775 "$DEPLOY_PATH/reports/cache" || true
            fi

            echo "Permissions updated without chown."

      - name: Read public base URL
        id: public
        run: |
          PUBLIC_BASE_URL=$(jq -r '.public_base_url' deploy-config.json)
          if [ "$PUBLIC_BASE_URL" = "null" ] || [ -z "$PUBLIC_BASE_URL" ]; then
            echo "Error: Could not read public_base_url from deploy-config.json"
            exit 1
          fi
          echo "public_base_url=$PUBLIC_BASE_URL" >> $GITHUB_OUTPUT

      - name: Verify health endpoint
        run: |
          URL="${{ steps.public.outputs.public_base_url }}/${{ steps.config.outputs.target_folder }}/health_check.php"
          echo "Checking: $URL"
          CODE=$(curl -L -s -o /dev/null -w "%{http_code}" "$URL")
          if [ "$CODE" != "200" ] && [ "$CODE" != "302" ]; then
            echo "Health check failed: HTTP $CODE"
            exit 1
          fi
          echo "Health check OK: $CODE"

      - name: SRD deployment validation
        run: |
          URL="${{ steps.public.outputs.public_base_url }}/${{ steps.config.outputs.target_folder }}/health_check.php?commit=${{ github.sha }}&target=${{ steps.config.outputs.target_folder }}"
          echo "Validating SRD deployment: $URL"
          response=$(curl -s "$URL")
          if echo "$response" | jq -e '.deployment_validation' > /dev/null; then
            echo "✅ SRD deployment validation passed"
            echo "$response" | jq '.deployment_validation'
          else
            echo "❌ SRD deployment validation failed"
            exit 1
          fi

      - name: SRD deployment summary
        run: |
          echo "## 🎯 SRD Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** ${{ steps.config.outputs.target_folder }}" >> $GITHUB_STEP_SUMMARY
          echo "**Architecture:** Individual ES6 modules (no bundling)" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check:** ${{ steps.public.outputs.public_base_url }}/${{ steps.config.outputs.target_folder }}/health_check.php" >> $GITHUB_STEP_SUMMARY
          echo "**Live URL:** ${{ steps.public.outputs.public_base_url }}/${{ steps.config.outputs.target_folder }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed to:** ${{ steps.config.outputs.server_base_path }}/${{ steps.config.outputs.target_folder }}" >> $GITHUB_STEP_SUMMARY
