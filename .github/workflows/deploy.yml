# Deployment workflow: reads deploy-config.json and deploys to $SERVER_BASE_PATH/$TARGET_FOLDER
# - Trigger: working-days-fix branch or manual (workflow_dispatch)
# - Purpose: Flexible target folder (e.g., otter2) without editing YAML each time
name: Deploy Enterprise to Web Server

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - working-days-fix
    paths:
      - '**/*.php'
      - '**/*.css'
      - '**/*.js'
      - 'config/**'
      - 'deploy-config.json'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read deployment configuration
        id: config
        run: |
          # Check if jq is available, if not install it
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get update && sudo apt-get install -y jq
          fi
          
          # Read deploy-config.json to get deployment settings
          if [ ! -f "deploy-config.json" ]; then
            echo "Error: deploy-config.json not found"
            exit 1
          fi
          
          echo "Deployment config file content:"
          cat deploy-config.json
          
          # Read deployment settings from config file
          TARGET_FOLDER=$(jq -r '.target_folder' deploy-config.json)
          SERVER_BASE_PATH=$(jq -r '.server_base_path' deploy-config.json)
          
          # Validate that we got actual values, not null
          if [ "$TARGET_FOLDER" = "null" ] || [ -z "$TARGET_FOLDER" ]; then
            echo "Error: Could not read target_folder from deploy-config.json"
            exit 1
          fi
          
          if [ "$SERVER_BASE_PATH" = "null" ] || [ -z "$SERVER_BASE_PATH" ]; then
            echo "Error: Could not read server_base_path from deploy-config.json"
            exit 1
          fi
          
          echo "target_folder=$TARGET_FOLDER" >> $GITHUB_OUTPUT
          echo "server_base_path=$SERVER_BASE_PATH" >> $GITHUB_OUTPUT
          
          # Expose config via outputs for subsequent steps
          echo "Deployment Configuration:"
          echo "Target Folder: $TARGET_FOLDER"
          echo "Server Base Path: $SERVER_BASE_PATH"
          echo "Full Deployment Path: $SERVER_BASE_PATH/$TARGET_FOLDER"



      - name: Deploy to SFTP (key-based auth)
        uses: wlixcc/SFTP-Deploy-Action@v1.2
        with:
          server: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          ssh_private_key: ${{ secrets.SFTP_PRIVATE_KEY }}
          port: ${{ secrets.SFTP_PORT }}
          local_path: './'
          remote_path: '${{ steps.config.outputs.server_base_path }}/${{ steps.config.outputs.target_folder }}'
          sftp_only: true
          args: '-o StrictHostKeyChecking=no'

      - name: Set permissions and create directories
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          key: ${{ secrets.SFTP_PRIVATE_KEY }}
          port: ${{ secrets.SFTP_PORT }}
          script: |
            DEPLOY_PATH="${{ steps.config.outputs.server_base_path }}/${{ steps.config.outputs.target_folder }}"
            
            # Set ownership for all files (web server user)
            chown -R www-data:www-data $DEPLOY_PATH
            
            # Set base permissions
            find $DEPLOY_PATH -type f -exec chmod 644 {} \;
            find $DEPLOY_PATH -type d -exec chmod 755 {} \;
            
            # Set executable permissions for PHP files (some hosts ExecCGI)
            find $DEPLOY_PATH -name "*.php" -exec chmod 755 {} \;
            
            # Create and set permissions for cache directory
            mkdir -p $DEPLOY_PATH/cache
            chown -R www-data:www-data $DEPLOY_PATH/cache
            chmod -R 775 $DEPLOY_PATH/cache
            
            # Create and set permissions for logs directory
            mkdir -p $DEPLOY_PATH/logs
            chown -R www-data:www-data $DEPLOY_PATH/logs
            chmod -R 775 $DEPLOY_PATH/logs
            
            # Set permissions for config directory
            chown -R www-data:www-data $DEPLOY_PATH/config
            chmod -R 775 $DEPLOY_PATH/config
            # Ensure passwords.json is writable by web server if needed
            if [ -f "$DEPLOY_PATH/config/passwords.json" ]; then
              chmod 664 "$DEPLOY_PATH/config/passwords.json"
            fi
            
            # Create enterprise-specific cache directories for known enterprises
            mkdir -p $DEPLOY_PATH/cache/ccc
            mkdir -p $DEPLOY_PATH/cache/csu
            mkdir -p $DEPLOY_PATH/cache/demo
            
            # Set full permissions for enterprise cache directories
            chmod -R 777 $DEPLOY_PATH/cache/ccc
            chmod -R 777 $DEPLOY_PATH/cache/csu
            chmod -R 777 $DEPLOY_PATH/cache/demo
            chown -R www-data:www-data $DEPLOY_PATH/cache/ccc
            chown -R www-data:www-data $DEPLOY_PATH/cache/csu
            chown -R www-data:www-data $DEPLOY_PATH/cache/demo
            
            # Set permissions for backup directory
            mkdir -p $DEPLOY_PATH/config/backups
            chown -R www-data:www-data $DEPLOY_PATH/config/backups
            chmod -R 775 $DEPLOY_PATH/config/backups
            
            # Set permissions for test results directory
            mkdir -p $DEPLOY_PATH/test-results
            chown -R www-data:www-data $DEPLOY_PATH/test-results
            chmod -R 775 $DEPLOY_PATH/test-results
            
            # Set permissions for reports cache (if it exists)
            if [ -d "$DEPLOY_PATH/reports/cache" ]; then
              chown -R www-data:www-data $DEPLOY_PATH/reports/cache
              chmod -R 775 $DEPLOY_PATH/reports/cache
            fi
            
            echo "Deployment completed to: $DEPLOY_PATH"
            echo "Enterprise cache directories created: ccc, csu, demo"
            echo "passwords.json writable (664) if present; config/logs/cache/test directories set"
            echo "All directories set with appropriate permissions" 

      - name: Verify health endpoint
        run: |
          URL_PATH="${{ steps.config.outputs.server_base_path }}/${{ steps.config.outputs.target_folder }}/health_check.php"
          # Convert server path to URL by stripping server base up to /htdocs
          URL="https://webaim.org${URL_PATH#*htdocs}"
          echo "Checking: $URL"
          CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          if [ "$CODE" != "200" ]; then
            echo "Health check failed: HTTP $CODE"
            exit 1
          fi
          echo "Health check OK: $CODE"

      - name: Deployment summary
        run: |
          echo "Deployed to: ${{ steps.config.outputs.server_base_path }}/${{ steps.config.outputs.target_folder }}" >> $GITHUB_STEP_SUMMARY