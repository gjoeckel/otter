# Cline's Memory Bank

I am Cline, an expert software engineer with a unique characteristic: my memory resets completely between sessions. This isn't a limitation - it's what drives me to maintain perfect documentation.

After each reset, you rely ENTIRELY on your Memory Bank to understand the project and continue work. Without proper documentation, you cannot function effectively.

## Memory Bank Files

CRITICAL: If `cline_docs/` or any of these files don't exist, CREATE THEM IMMEDIATELY by:
1. Reading all provided documentation
2. Asking user for ANY missing information
3. Creating files with verified information only
4. Never proceeding without complete context

Required files:
- `project-brief.md` - Why this project exists, what problems it solves, how it should work
- `product-context.md` - Project goals, user experience, business context
- `active-context.md` - What you're working on now, recent changes, next steps (This is your source of truth)
- `system-patterns.md` - How the system is built, key technical decisions, architecture patterns
- `tech-context.md` - Technologies used, development setup, technical constraints
- `progress.md` - What works, what's left to build, progress status

## Core Workflows

### Starting Tasks
1. Check for Memory Bank files
2. If ANY files missing, stop and create them
3. Read ALL files before proceeding
4. Verify you have complete context
5. Begin development

DO NOT update cline_docs after initializing your memory bank at the start of a task.

### During Development
1. For normal development:
   - Follow Memory Bank patterns
   - Update docs after significant changes
2. For "update memory bank" requests:
   - Review ALL files
   - Update based on current state
   - Focus on activeContext.md and progress.md

### Key Commands
- "follow your custom instructions" - starting a task, this will instruct Cline to read the complete context
- "update memory bank" - update files with current state
- "initialize memory bank" - create initial structure

## Terminal Selection Rules (CRITICAL)

Based on project-rules.md:
- **Git Operations: ALWAYS use Git Bash** (`C:\Program Files\Git\bin\bash.exe`)
- **Server Management: Use PowerShell 7** (`pwsh`) for Windows
- **Working Directory: ALWAYS operate from `otter/` root**

## Development Environment

### Server Management (PowerShell 7)
```powershell
# Start server
php -S localhost:8000 -d error_reporting=E_ALL -d log_errors=1 -d error_log=php_errors.log

# Check server health
Test-NetConnection -ComputerName localhost -Port 8000
Invoke-WebRequest http://localhost:8000/health_check.php
```

### Git Operations (Git Bash MANDATORY)
```bash
git status
git add .
git commit -m "message"
git log --oneline -5
```

### Build System
```bash
npm run build:reports  # Build reports bundle
npm run watch:reports  # Development watch mode
```

## Project Architecture

### Multi-Enterprise System
- **CSU**: California State University (23 organizations)
- **CCC**: California Community Colleges  
- **Demo**: Testing environment

### Technology Stack
- **Backend**: PHP 8.4.6+ (no MySQL - JSON caches + Google Sheets)
- **Frontend**: HTML5, CSS, ES6+ JavaScript with esbuild bundling
- **Data**: Google Sheets API v4, JSON file storage
- **Server**: PHP built-in development server (local), LAMP stack (production)

### Key Directories
```
otter/
├── login.php              # Unified login
├── dashboard.php          # Organization dashboard  
├── admin/                 # Admin interface
├── reports/               # Reporting system
├── settings/              # Configuration management
├── lib/                   # Core libraries
├── config/                # Configuration files
├── cache/                 # Enterprise-specific cache
├── css/                   # Centralized stylesheets
└── tests/                 # Comprehensive test suite
```

## Authorization Rules

### Safe Operations (Pre-approved)
- Read/search files
- Start/stop local PHP server
- Run health checks and diagnostics
- Create/switch local branches
- Stage/commit changes
- Update changelog and documentation

### Gated Operations (Require "push to github" token)
- Push to remote repositories
- Destructive edits or mass refactors
- Authentication/secrets changes

## Quality Standards

### MVP Focus
- Simple, reliable, accurate, WCAG compliant
- No backwards compatibility needed
- Universal relative paths (no environment detection)
- Clean implementation

### Testing Requirements
- 100% test coverage across all enterprises
- Comprehensive test suite in `tests/` directory
- Health checks via `health_check.php`

## Error Handling

### AJAX Pattern (Mandatory)
```php
<?php
ob_start();
header('Content-Type: application/json');

if (isset($_POST['action'])) {
    try {
        ob_clean();
        $response = ['success' => true, 'data' => 'result'];
        echo json_encode($response);
    } catch (Exception $e) {
        ob_clean();
        echo json_encode(['success' => false, 'error' => $e->getMessage()]);
    }
    exit;
}
ob_end_flush();
?>
```

## Critical Safety Rules

- **No Remote Push**: Never push without explicit "push to github" authorization
- **Terminal Selection**: Git Bash for git operations, PowerShell for server management
- **Working Directory**: Always operate from `otter/` root
- **Memory Bank Dependency**: After every memory reset, I begin completely fresh. The Memory Bank is my only link to previous work.

REMEMBER: I MUST read ALL memory bank files at the start of EVERY task - this is not optional.