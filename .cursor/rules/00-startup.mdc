Title: OTTER – Chat Startup Rule (Read-First Policy)

Intent
- Ensure every new chat instance begins with the same deterministic discovery sequence before taking any actions.

On New Chat – Startup Modes (Light default)

Trigger Phrases
- "startup" → Light Mode (default)
- "startup deep" → Deep Mode (full discovery)

Mode Selection Heuristics
- Start in Light Mode unless the conversation mentions push/deploy/CI/workflows or the task is explicitly about builds, deploys, or gated git actions. If such signals are detected, auto‑escalate to Deep Mode.

Light Mode — Minimal Read Set (resource-conserving, prescriptive)
1) README.md — Quick Start + Terminal Usage only
   - Read from the top until the first "## Architecture Overview" heading, or a maximum of 200 lines, whichever occurs first.
   - Capture only the "Quick Start" and "Terminal Usage Guidelines" sections; skip everything else.
   - Exact process:
     - Preferred: use file reader with offset=1 and limit=200.
     - PowerShell: Get-Content -Path README.md -TotalCount 200 | Out-String
     - Git Bash: sed -n '1,200p' README.md | cat
2) project-rules.md — minimal targeted read
   - Read only these sections:
     - "Terminal Selection Matrix" (or equivalent terminal rules section)
     - "Appendix A: Command Reference"
     - "Git Policies" (if present)
   - Exact process:
     - First, list headings to locate line numbers:
       - PowerShell: Select-String -Pattern '^## ' -Path project-rules.md | Out-String
       - Git Bash: grep -n '^## ' project-rules.md | cat
     - Then read only the ranges for the sections above with ±10 lines of context around each:
       - Preferred: use file reader with calculated offset/limit per section (include ±10 lines context).
       - PowerShell example: Select-String -Pattern '^(##\s+Terminal Selection Matrix|##\s+Appendix A: Command Reference|##\s+Git Policies)' -Context 10,200 project-rules.md | Out-String
       - Git Bash example: awk '/^## (Terminal Selection Matrix|Appendix A: Command Reference|Git Policies)/, /^## / {print}' project-rules.md | cat
     - Do not read the entire file.
3) changelog.md — most recent 25 lines only
   - Exact process:
     - Preferred: tail the last 25 lines only.
     - PowerShell: Get-Content -Path changelog.md -Tail 25 | Out-String
     - Git Bash: tail -n 25 changelog.md | cat
4) 0_deploy.txt — last 100–150 lines only
   - Exact process:
     - PowerShell: Get-Content -Path 0_deploy.txt -Tail 150 | Out-String
     - Git Bash: tail -n 150 0_deploy.txt | cat
   - If the file is shorter than 150 lines, read it once in full; do not re-read.


Deep Mode — Full Discovery (when authorized/needed)
1) project-rules.md (governance, authority model, terminal matrix)
2) README.md (quick start, run/test/build, architecture)
3) github-integration-updates.md (phased GitHub/CI improvements)
4) changelog.md (read only the most recent 25 lines)
5) deploy-config.json (paths: target_folder, server_base_path, public_base_url)
6) 0_deploy.txt (read top lines for runner info and tail ~150 lines for latest outcome)

2) Enforce terminal policy immediately:
   - All Git operations must run in Git Bash only [[policy: git-bash-only]].
   - Server/testing/build tasks prefer PowerShell on Windows.

3) Gate dangerous operations:
   - Do NOT push to remote without explicit, exact token: push to github [[policy: push-token-required]].
   - Treat production deploys as CI/CD-driven only; do not mutate remote servers directly from the chat.

4) Baseline for diffs and summaries:
   - Determine changes since last push using @{upstream}..HEAD with fallback to origin/<current-branch>..HEAD.
   - Prefer a single high-level roll-up commit message and add a timestamped changelog entry mirroring that summary.

5) Default safe operations (pre-approved):
   - Read/search files; list directories; analyze code; propose edits.
   - Start/stop local PHP server; run tests; build reports bundle.
   - Update docs and changelog locally.

6) If deploy context is involved:
   - Verify CI workflow uploads artifact contents to the deploy root (no nested artifacts/).
   - Avoid chown in SSH steps unless privileged; prefer mkdir/chmod where needed.
   - Require a post-deploy health check to return 200/302.

Policies (references)
- [[policy: git-bash-only]] In this project, only git actions require Git Bash; PowerShell is preferred for tests/server (Windows).
- [[policy: push-token-required]] Pushing to remote requires the exact, case-sensitive token: push to github.

Success Criteria for Startup
- The assistant acknowledges having read the Must-Read Set and summarizes any immediate constraints (branch status, CI health, deploy path) before proposing actions.

